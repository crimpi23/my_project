<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:g="http://base.google.com/ns/1.0" version="2.0">
  <channel>
    <title>AutogroupEU - Auto Parts</title>
    <link>{{ domain }}</link>
    <description>Auto parts catalog</description>
    {% for product in products %}
    <item>
      <g:id>{{ product.article }}</g:id>
      <title>{{ product.name or product.article }}</title>
      <description>{{ product.description or product.name or product.article }}</description>
      <link>{{ domain }}/{{ language }}/product/{{ product.article }}</link>
      <g:price>{{ "%.2f"|format(product.price|float) }} EUR</g:price>
      <g:condition>new</g:condition>
      <g:availability>{% if product.quantity > 0 %}in stock{% else %}out of stock{% endif %}</g:availability>
      <g:brand>{{ product.brand_name or "AutogroupEU" }}</g:brand>
      <g:google_product_category>{{ product.google_category }}</g:google_product_category>
      
      <!-- Основне фото -->
      {% if product.main_image_url %}
      <g:image_link>{{ product.main_image_url }}</g:image_link>
      {% else %}
      <g:image_link>{{ domain }}/static/images/placeholder.png</g:image_link>
      {% endif %}
      
      <!-- Додаткові фото -->
      {% if product.additional_images %}
        {% for image_url in product.additional_images %}
          {% if image_url %}
      <g:additional_image_link>{{ image_url }}</g:additional_image_link>
          {% endif %}
        {% endfor %}
      {% endif %}
    </item>
    {% endfor %}
  </channel>
</rss>
@app.route('/google-merchant-feed/<language>.xml')
def google_merchant_feed(language):
    """Generate Google Merchant feed for specific language"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
            
            # Get active feed settings for specific language
            cursor.execute("""
                SELECT gs.*, b.name as brand_name 
                FROM google_feed_settings gs
                LEFT JOIN brands b ON gs.brand_id = b.id
                WHERE gs.enabled = TRUE AND gs.language = %s
                ORDER BY gs.created_at DESC
                LIMIT 1
            """, (language,))
            settings = cursor.fetchone()
            
            if not settings:
                return "No active feed settings found for this language", 404

            # Get products from configured price list
            price_list = settings['price_list_id']
            markup_percentage = settings['markup_percentage'] or 0
            
            query = f"""
                SELECT 
                    p.article,
                    p.name_{language} as name,
                    p.description_{language} as description,
                    pl.price * (1 + %s/100) as price,
                    b.name as brand_name,
                    %s as google_category,
                    COALESCE(s.quantity, 0) as quantity,
                    (
                        SELECT image_url FROM product_images 
                        WHERE product_article = p.article AND is_main = TRUE
                        LIMIT 1
                    ) as main_image_url,
                    (
                        SELECT json_agg(image_url) FROM product_images 
                        WHERE product_article = p.article AND is_main = FALSE
                        LIMIT 10
                    ) as additional_images
                FROM {price_list} pl
                JOIN products p ON pl.article = p.article
                LEFT JOIN stock s ON pl.article = s.article
                LEFT JOIN brands b ON s.brand_id = b.id
                WHERE p.name_{language} IS NOT NULL
            """
            
            params = [markup_percentage, settings['category']]
            
            if settings['brand_id']:
                query += " AND s.brand_id = %s"
                params.append(settings['brand_id'])
            
            cursor.execute(query, params)
            products = cursor.fetchall()
            
            # Process JSON data for additional images
            for product in products:
                if product['additional_images'] and isinstance(product['additional_images'], str):
                    try:
                        product['additional_images'] = json.loads(product['additional_images'])
                    except json.JSONDecodeError:
                        product['additional_images'] = []
                elif not product['additional_images']:
                    product['additional_images'] = []
            
            # Generate XML
            xml_content = render_template(
                'feeds/google_merchant.xml',
                products=products,
                domain=request.host_url.rstrip('/'),
                language=language
            )

            # Set response headers
            download = request.args.get('download', False)
            if download:
                response = Response(xml_content, mimetype='application/xml')
                response.headers["Content-Disposition"] = f"attachment; filename=google_feed_{language}.xml"
                return response
            
            return Response(xml_content, mimetype='application/xml')

    except Exception as e:
        logging.error(f"Error generating feed: {e}")
        return "Error generating feed", 500
@app.route('/google-merchant-feed/<language>.xml')
def google_merchant_feed(language):
    """Generate Google Merchant feed for specific language"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
            
            # Get active feed settings for specific language
            cursor.execute("""
                SELECT gs.*, b.name as brand_name 
                FROM google_feed_settings gs
                LEFT JOIN brands b ON gs.brand_id = b.id
                WHERE gs.enabled = TRUE AND gs.language = %s
                ORDER BY gs.created_at DESC
                LIMIT 1
            """, (language,))
            settings = cursor.fetchone()
            
            if not settings:
                return "No active feed settings found for this language", 404

            # Get products from configured price list
            price_list = settings['price_list_id']
            markup_percentage = settings['markup_percentage'] or 0
            
            query = f"""
                SELECT 
                    p.article,
                    p.name_{language} as name,
                    p.description_{language} as description,
                    pl.price * (1 + %s/100) as price,
                    b.name as brand_name,
                    %s as google_category,
                    COALESCE(s.quantity, 0) as quantity,
                    (
                        SELECT image_url FROM product_images 
                        WHERE product_article = p.article AND is_main = TRUE
                        LIMIT 1
                    ) as main_image_url,
                    (
                        SELECT json_agg(image_url) FROM product_images 
                        WHERE product_article = p.article AND is_main = FALSE
                        LIMIT 10
                    ) as additional_images
                FROM {price_list} pl
                JOIN products p ON pl.article = p.article
                LEFT JOIN stock s ON pl.article = s.article
                LEFT JOIN brands b ON s.brand_id = b.id
                WHERE p.name_{language} IS NOT NULL
            """
            
            params = [markup_percentage, settings['category']]
            
            if settings['brand_id']:
                query += " AND s.brand_id = %s"
                params.append(settings['brand_id'])
            
            cursor.execute(query, params)
            products = cursor.fetchall()
            
            # Process JSON data for additional images
            for product in products:
                if product['additional_images'] and isinstance(product['additional_images'], str):
                    try:
                        product['additional_images'] = json.loads(product['additional_images'])
                    except json.JSONDecodeError:
                        product['additional_images'] = []
                elif not product['additional_images']:
                    product['additional_images'] = []
            
            # Generate XML
            xml_content = render_template(
                'feeds/google_merchant.xml',
                products=products,
                domain=request.host_url.rstrip('/'),
                language=language
            )

            # Set response headers
            download = request.args.get('download', False)
            if download:
                response = Response(xml_content, mimetype='application/xml')
                response.headers["Content-Disposition"] = f"attachment; filename=google_feed_{language}.xml"
                return response
            
            return Response(xml_content, mimetype='application/xml')

    except Exception as e:
        logging.error(f"Error generating feed: {e}")
        return "Error generating feed", 500
